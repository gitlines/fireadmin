stages:
  - unit_tests
  - build
  - deploy_staging
  - e2e_tests
  - build_production
  - deploy_production

variables:
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"

# Cache dependencies across jobs only pulling not uploading (upload to cache
# happens in build stage)
cache:
  untracked: true
  key: ${CI_COMMIT_REF_SLUG}
  policy: pull # only pull cache, skip uploading
  # NOTE: Folders used since npm cache ($HOME/.npm) does not persist
  paths:
    - .npm
    - node_modules
    - functions/node_modules

# Script run before all stages unless otherwise overriden
before_script:
  - CYPRESS_INSTALL_BINARY=0 npm i # Install dependencies skipping Cypress
  - npm i --prefix functions # Install functions dependencies

# Unit Testing Stage
# Run unit tests for Cloud Functions
Functions Unit Tests:
  stage: unit_tests
  image: node:8
  only:
    changes:
      - functions/**/* # Run only when functions are changed
      - firebase.json
      - .gitlab-ci.yml
  allow_failure: true
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-tests/
      - $CI_COMMIT_MESSAGE =~ /skip-unit-tests/
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    expire_in: 2 weeks
    paths:
      - functions/coverage # Test coverage report
  # Override cache behavior set above since we want to both pull and push to
  # the cache (no "policy" provided since pull-push is default)
  cache:
    untracked: true
    key: ${CI_COMMIT_REF_SLUG}
    # NOTE: Folders used since npm cache ($HOME/.npm) does not persist
    paths:
      - .npm
      - functions/node_modules
  before_script:
    - npm i --prefix functions
  script:
    - npm run lint --prefix functions
    - npm run test:cov --prefix functions

# ---------------------------- Docs -------------------------- #
# Build Docs
## Installs dependencies, builds app, and saves results for later (artifacts)
Build Docs:
  stage: build
  image: node:8
  only:
    changes:
      - docs/**/* # Run only when docs are changed
      - firebase.json
      - .gitlab-ci.yml
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-build/
      - $CI_COMMIT_MESSAGE =~ /skip-docs-build/
  artifacts:
    name: $CI_JOB_STAGE-$CI_COMMIT_REF_SLUG
    expire_in: 2 weeks
    when: always
    paths:
      - docs/public
  cache:
    untracked: true # track files that are untracked in git
    key: docs
    paths:
      - docs/.yarn
      - docs/node_modules
  before_script:
    - yarn config set cache-folder docs/.yarn
    - yarn --cwd docs --frozen-lockfile install
  script:
    - yarn --cwd docs lint
    - yarn --cwd docs build

# Deploy Docs
## Deploy Docs to Firebase Hosting
Deploy Docs:
  stage: deploy_production
  image: node:8
  only:
    changes:
      - docs/**/* # Run only when docs are changed
      - firebase.json
      - .gitlab-ci.yml
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-deploy/
      - $CI_COMMIT_MESSAGE =~ /skip-docs-deploy/
  artifacts:
    name: $CI_JOB_STAGE-$CI_COMMIT_REF_SLUG
    expire_in: 2 weeks
    when: always
    paths:
      - docs/public
  cache:
    untracked: true # track files that are untracked in git
    key: docs
    paths:
      - docs/.yarn
      - docs/node_modules
  before_script:
    - yarn config set cache-folder docs/.yarn
    - yarn --cwd docs --frozen-lockfile install
  script:
    - npm run deploy:docs  # Deploy docs React App (Firebase Hosting)

# ---------------------------- React App -------------------------- #
# Build App
# Installs dependencies, builds app, and saves results for later (artifacts).
# 1. Install dependencies for React App and Cloud Functions. Installing of
# cypress binary is skipped (done in E2E Testing Stage)
# 2. Build environment specific config file in src/config.js
# 3. Confirm there is no lint within code (after config is injected for import linting)
# 4. Build React app to dist folder
# 5. Preserve build results and dependencies for future jobs in the pipeline
Build Staging:
  stage: build
  image: node:8
  when: always
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-build/
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    expire_in: 2 weeks
    when: always
    paths:
      - dist
  # Override cache behavior set above since we want to both pull and push to
  # the cache (no "policy" provided since pull-push is default)
  cache:
    untracked: true
    key: ${CI_COMMIT_REF_SLUG}
    # NOTE: Folders used since npm cache ($HOME/.npm) does not persist
    paths:
      - .npm
      - node_modules
  script:
    - npm run build:config # create env specific src/config.js
    - npm run lint
    - npm run build

# Deploy Staging
# Deploy React App and Cloud Functions
Deploy Staging:
  stage: deploy_staging
  image: node:8
  environment:
    name: staging
    url: https://fireadmin-stage.firebaseapp.com
  when: on_success
  only:
    - master
    - web
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-deploy/
      - $CI_COMMIT_MESSAGE =~ /skip-stage-deploy/
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    expire_in: 1 weeks
    when: on_failure
    paths:
      - firebase-debug.log
  dependencies:
    - Build Staging
  script:
    - npm run deploy:app  # Deploy docs React App (Firebase Hosting)

# End To End Tests
# Install Cypress binary and run end to end tests using Cypress
UI Tests:
# .uitest_template: &job
  stage: e2e_tests
  image: cypress/base:8
  when: on_success
  allow_failure: true
  only:
    - master
    - web
    - schedules
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-tests/
      - $CI_COMMIT_MESSAGE =~ /skip-ui-tests/
  # Cache dependencies across jobs only pulling not uploading (upload to cache
  # happens in build stage)
  cache:
    untracked: true
    key: ${CI_COMMIT_REF_SLUG}
    # NOTE: Folders used since npm cache ($HOME/.npm) does not persist
    paths:
      - .npm
      - node_modules
      - cache/Cypress
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    expire_in: 2 weeks
    when: always
    paths:
      - cypress/videos
      - cypress/screenshots
      - cypress.env.json
  before_script:
     # Install deps including Cypress binary (skipped in default before_script)
    - npm i
    - npm i cypress
    # Confirm Cypress is ready to use
    - $(npm bin)/cypress verify
  script:
    # Create environment specific test config including auth token
    # (saved to cypress.env.json) then run E2E Tests through Cypress in load balancing mode
    - npm run test:ui:stage -- --record --key $CYPRESS_KEY
    # To run in parallel, uncomment the following line, the job definitions (below), and the job template name (above)
    # - npm run test:ui:stage -- --record --key $CYPRESS_KEY --parallel --ci-build-id $CI_PIPELINE_ID --group uitests

# actual job definitions
# all steps are the same, they come from the template above
# uitests-1:
#   <<: *job
# uitests-2:
#   <<: *job
# uitests-3:
#   <<: *job
# uitests-4:
#   <<: *job
# uitests-5:
#   <<: *job

# Build Production version of bundle (has different config)
Build Prod App:
  stage: build_production
  image: node:8
  when: on_success
  only:
    - master
    - prod
    - web
  variables:
    FIREBASE_CI_PROJECT: "prod" # deploy using prod project in .firebaserc
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-deploy/
      - $CI_COMMIT_MESSAGE =~ /skip-prod-deploy/
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    expire_in: 1 week
    when: always
    paths:
      - dist
  script:
    - npm run clean # remove existing dist folder
    - npm run build:config # create env specific src/config.js
    - npm run build # rebuild bundle with new config
    # Note: Functions are not rebuilt since a bundle with env specific config
    # is not created as with React App

# Deploy Production
# Deploy React App and Cloud Functions to production environment
Deploy Production:
  stage: deploy_production
  image: node:8
  environment:
    name: production
    url: https://fireadmin.io
  when: manual # Only allow run through button on Gitlab site
  only:
    - master
    - prod
    - web
  variables:
    FIREBASE_CI_PROJECT: "prod" # deploy using prod project in .firebaserc
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-deploy/
      - $CI_COMMIT_MESSAGE =~ /skip-prod-deploy/
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    expire_in: 1 week
    when: on_failure
    paths:
      - firebase-debug.log
  script:
    - npm run deploy # Deploy Cloud Functions and React App (Firebase Hosting)
